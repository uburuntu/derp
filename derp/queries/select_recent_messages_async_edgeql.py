# AUTOGENERATED FROM 'derp/queries/select_recent_messages.edgeql' WITH:
#     $ gel-py -I uburuntu/derp


from __future__ import annotations
import dataclasses
import datetime
import gel
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema
        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        _ = pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class SelectRecentMessagesResult(NoPydanticValidation):
    id: uuid.UUID
    direction: str
    message_id: int
    tg_date: datetime.datetime | None
    edited_at: datetime.datetime | None
    content_type: str | None
    text: str | None
    reply_to_message_id: int | None
    media_group_id: str | None
    attachment_type: str | None
    attachment_file_id: str | None
    from_user: SelectRecentMessagesResultFromUser | None
    chat: SelectRecentMessagesResultChat


@dataclasses.dataclass
class SelectRecentMessagesResultChat(NoPydanticValidation):
    id: uuid.UUID
    chat_id: int


@dataclasses.dataclass
class SelectRecentMessagesResultFromUser(NoPydanticValidation):
    id: uuid.UUID
    user_id: int
    display_name: str | None
    username: str | None


async def select_recent_messages(
    executor: gel.AsyncIOExecutor,
    *,
    chat_id: int,
    limit: int,
) -> list[SelectRecentMessagesResult]:
    return await executor.query(
        """\
        # Pending until schema with telegram::MessageLog is applied
        # Select recent cleaned messages for a chat from MessageLog
        #
        # Intent: pick the latest N records by update/create time (and message_id as
        # tiebreaker), then reverse them so the final result is chronological (oldest
        # first). This ensures the limit applies to the most recent updates while the
        # consumer receives them in forward-reading order.
        with selected := (
            select telegram::MessageLog
            filter .chat.chat_id = <int64>$chat_id and not .is_deleted
            order by .created_at desc then .message_id desc
            limit <int64>$limit
        )
        select selected {
            direction,
            message_id,
            tg_date,
            edited_at,
            content_type,
            text,
            reply_to_message_id,
            media_group_id,
            attachment_type,
            attachment_file_id,
            from_user: {
                user_id,
                display_name,
                username,
            },
            chat: { chat_id },
        }
        order by selected.created_at asc then selected.message_id asc;\
        """,
        chat_id=chat_id,
        limit=limit,
    )
