# AUTOGENERATED FROM 'derp/queries/create_bot_update_with_upserts.edgeql' WITH:
#     $ gel-py -I uburuntu/derp


from __future__ import annotations
import dataclasses
import gel
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema
        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        _ = pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class CreateBotUpdateWithUpsertsResult(NoPydanticValidation):
    id: uuid.UUID


async def create_bot_update_with_upserts(
    executor: gel.AsyncIOExecutor,
    *,
    user_id: int | None = None,
    user_is_bot: bool | None = None,
    user_first_name: str | None = None,
    user_last_name: str | None = None,
    user_username: str | None = None,
    user_language_code: str | None = None,
    user_is_premium: bool | None = None,
    user_added_to_attachment_menu: bool | None = None,
    chat_id: int | None = None,
    chat_type: str | None = None,
    chat_title: str | None = None,
    chat_username: str | None = None,
    chat_first_name: str | None = None,
    chat_last_name: str | None = None,
    chat_is_forum: bool | None = None,
    sender_chat_id: int | None = None,
    sender_chat_type: str | None = None,
    sender_chat_title: str | None = None,
    sender_chat_username: str | None = None,
    sender_chat_first_name: str | None = None,
    sender_chat_last_name: str | None = None,
    sender_chat_is_forum: bool | None = None,
    update_id: int,
    update_type: str,
    raw_data: str,
    handled: bool,
) -> CreateBotUpdateWithUpsertsResult:
    return await executor.query_single(
        """\
        # Comprehensive atomic operation: upsert user/chats and insert BotUpdate with relations
        with
            # Upsert User if provided
            user_result := (
                insert telegram::User {
                    user_id := <optional int64>$user_id,
                    is_bot := <optional bool>$user_is_bot ?? false,
                    first_name := <optional str>$user_first_name ?? '',
                    last_name := <optional str>$user_last_name,
                    username := <optional str>$user_username,
                    language_code := <optional str>$user_language_code,
                    is_premium := <optional bool>$user_is_premium ?? false,
                    added_to_attachment_menu := <optional bool>$user_added_to_attachment_menu ?? false,
                }
                unless conflict on .user_id
                else (
                    update telegram::User
                    set {
                        is_bot := <optional bool>$user_is_bot ?? false,
                        first_name := <optional str>$user_first_name ?? '',
                        last_name := <optional str>$user_last_name,
                        username := <optional str>$user_username,
                        language_code := <optional str>$user_language_code,
                        is_premium := <optional bool>$user_is_premium ?? false,
                        added_to_attachment_menu := <optional bool>$user_added_to_attachment_menu ?? false,
                    }
                )
            ) if exists <optional int64>$user_id else <telegram::User>{},

            # Upsert Chat if provided
            chat_result := (
                insert telegram::Chat {
                    chat_id := <optional int64>$chat_id,
                    type := <optional str>$chat_type ?? '',
                    title := <optional str>$chat_title,
                    username := <optional str>$chat_username,
                    first_name := <optional str>$chat_first_name,
                    last_name := <optional str>$chat_last_name,
                    is_forum := <optional bool>$chat_is_forum ?? false,
                }
                unless conflict on .chat_id
                else (
                    update telegram::Chat
                    set {
                        type := <optional str>$chat_type ?? '',
                        title := <optional str>$chat_title,
                        username := <optional str>$chat_username,
                        first_name := <optional str>$chat_first_name,
                        last_name := <optional str>$chat_last_name,
                        is_forum := <optional bool>$chat_is_forum ?? false,
                    }
                )
            ) if exists <optional int64>$chat_id else <telegram::Chat>{},

            # Upsert Sender Chat if provided (different from main chat)
            sender_chat_result := (
                insert telegram::Chat {
                    chat_id := <optional int64>$sender_chat_id,
                    type := <optional str>$sender_chat_type ?? '',
                    title := <optional str>$sender_chat_title,
                    username := <optional str>$sender_chat_username,
                    first_name := <optional str>$sender_chat_first_name,
                    last_name := <optional str>$sender_chat_last_name,
                    is_forum := <optional bool>$sender_chat_is_forum ?? false,
                }
                unless conflict on .chat_id
                else (
                    update telegram::Chat
                    set {
                        type := <optional str>$sender_chat_type ?? '',
                        title := <optional str>$sender_chat_title,
                        username := <optional str>$sender_chat_username,
                        first_name := <optional str>$sender_chat_first_name,
                        last_name := <optional str>$sender_chat_last_name,
                        is_forum := <optional bool>$sender_chat_is_forum ?? false,
                    }
                )
            ) if exists <optional int64>$sender_chat_id else <telegram::Chat>{}

        # Insert BotUpdate and return its id
        select (
            insert telegram::BotUpdate {
                update_id := <int64>$update_id,
                update_type := <str>$update_type,
                raw_data := <json>$raw_data,
                handled := <bool>$handled ?? false,
                from_user := user_result if exists <optional int64>$user_id else {},
                chat := chat_result if exists <optional int64>$chat_id else {},
            }
        ) {
            id
        };\
        """,
        user_id=user_id,
        user_is_bot=user_is_bot,
        user_first_name=user_first_name,
        user_last_name=user_last_name,
        user_username=user_username,
        user_language_code=user_language_code,
        user_is_premium=user_is_premium,
        user_added_to_attachment_menu=user_added_to_attachment_menu,
        chat_id=chat_id,
        chat_type=chat_type,
        chat_title=chat_title,
        chat_username=chat_username,
        chat_first_name=chat_first_name,
        chat_last_name=chat_last_name,
        chat_is_forum=chat_is_forum,
        sender_chat_id=sender_chat_id,
        sender_chat_type=sender_chat_type,
        sender_chat_title=sender_chat_title,
        sender_chat_username=sender_chat_username,
        sender_chat_first_name=sender_chat_first_name,
        sender_chat_last_name=sender_chat_last_name,
        sender_chat_is_forum=sender_chat_is_forum,
        update_id=update_id,
        update_type=update_type,
        raw_data=raw_data,
        handled=handled,
    )
